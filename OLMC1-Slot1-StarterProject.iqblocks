{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">my variable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_looks_print\" id=\"]rLcSQ_h6uk}Ds0$u%9m\"><value name=\"DATA\"><shadow type=\"text\" id=\"lrYKDM-}lnJ%SCBnf_L^\"><field name=\"TEXT\">Test Drive</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"{WVRf9X19h9^qkABRH`[\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">rev</field><next><block type=\"iq_motion_spin\" id=\"*qr~i_]7X;*;bu%,dlBC\"><field name=\"MOTOR\">SecondaryLift</field><field name=\"DIRECTION\">rev</field><next><block type=\"iq_motion_set_motor_position\" id=\"Q0B4@F5.$@9w(Pn!eHWP\"><field name=\"MOTOR\">MainLift</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"h9CXqO-lUlh(iKce{Ou)\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_set_motor_position\" id=\"-or7RDrdOL+UIEDRF|D:\"><field name=\"MOTOR\">SecondaryLift</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"W.WS6Xr2;l%+}Uosu5y9\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"9oesm:3ee#MclIRT}E(3\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"i%vZSpAA3+mzwZq~OQf1\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\"=tj($ca_Y$DTTIc=eKXG\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"v3GZ^$.L+cP=grZ7qQR7\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"6Bl*?tp)[.4s|!FZIh3W\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"]DmW|As$a,$2/H3v}!xs\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"L2WTecfjxR9PiV{3rhz4\"><field name=\"MOTOR\">Strafe</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\".$Yd8?]{KOg^VHDAC^8)\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"~.`=+nf5!^sMEg.zpE;3\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Noby^n$LPgHEA?@J0~57\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"`1V!(Y=b);Rsru,Somvq\"><field name=\"MOTOR\">SecondaryLift</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"K2o_X|vg(7_6t(!;xn:;\"><field name=\"NUM\">.5</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","hasGyro":"false","width":"173","unit":"mm"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"MainLift","rightDir":"true","e":"SecondaryLift","eDir":"false","f":"Strafe","fDir":"true","drive":"tank"}},{"port":[5],"name":"Strafe","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"left","rev":"right"}},{"port":[4],"name":"MainLift","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"up","rev":"down"}},{"port":[11],"name":"SecondaryLift","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"up","rev":"down"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"iq_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n// Robot configuration code.\nvex::motor LeftDriveSmart = vex::motor(vex::PORT1, 1, false);\nvex::motor RightDriveSmart = vex::motor(vex::PORT12, 1, true);\nvex::drivetrain Drivetrain= vex::drivetrain(LeftDriveSmart, RightDriveSmart,200, 173);\n;\ncontroller Controller = controller();\nmotor Strafe = motor(vex::PORT5, false);\nmotor MainLift = motor(vex::PORT4, true);\nmotor SecondaryLift = motor(vex::PORT11, true);\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision;\n\n\n// Generated code.\n\nbool RemoteControlCodeEnabled = true;\n\n\n\n \n bool RightStop_Backend_Bool_Controller = true;\n bool EStop_Backend_Bool = true;\n bool FStop_Backend_Bool = true;\n \n \nbool drivetrainL_Backend_Bool_Controller = true; \n bool drivetrainR_Backend_Bool_Controller = true;\n  int rc_auto_loop_callback_Controller() {\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n    int l_speed_for_d_train = Controller.AxisA.position();\n    int r_speed_for_d_train = Controller.AxisD.position();\nif (l_speed_for_d_train < 5 && l_speed_for_d_train > -5){\nif (drivetrainL_Backend_Bool_Controller) { LeftDriveSmart.stop(); drivetrainL_Backend_Bool_Controller = false;\n}\n} else {drivetrainL_Backend_Bool_Controller = true;} if (r_speed_for_d_train < 5 && r_speed_for_d_train > -5){\nif (drivetrainR_Backend_Bool_Controller) { RightDriveSmart.stop(); drivetrainR_Backend_Bool_Controller = false;\n}\n} else {drivetrainR_Backend_Bool_Controller = true;}     if (drivetrainL_Backend_Bool_Controller){\nLeftDriveSmart.setVelocity(l_speed_for_d_train, vex::velocityUnits::pct);\n    LeftDriveSmart.spin(vex::directionType::fwd);\n}    if (drivetrainR_Backend_Bool_Controller){\nRightDriveSmart.setVelocity(r_speed_for_d_train, vex::velocityUnits::pct);\n    RightDriveSmart.spin(vex::directionType::fwd);\n}\n        if (Controller.ButtonRUp.pressing()) {\n      MainLift.spin(vex::directionType::rev);\n      RightStop_Backend_Bool_Controller = false;\n    }\n    else if (Controller.ButtonRDown.pressing()) {\n      MainLift.spin(vex::directionType::fwd);\n      RightStop_Backend_Bool_Controller = false;\n    }\n    else if (!RightStop_Backend_Bool_Controller){\n       MainLift.stop();\n      RightStop_Backend_Bool_Controller = true;\n    }\n    if (Controller.ButtonEUp.pressing()) {\n      SecondaryLift.spin(vex::directionType::fwd);\n      EStop_Backend_Bool = false;\n    }\n    else if (Controller.ButtonEDown.pressing()) {\n      SecondaryLift.spin(vex::directionType::rev);\n      EStop_Backend_Bool = false;\n    }\n    else if (!EStop_Backend_Bool){\n      SecondaryLift.stop();\n      EStop_Backend_Bool = true;\n    }\n    if (Controller.ButtonFUp.pressing()) {\n      Strafe.spin(vex::directionType::rev);\n      FStop_Backend_Bool = false;\n    }\n    else if (Controller.ButtonFDown.pressing()) {\n      Strafe.spin(vex::directionType::fwd);\n      FStop_Backend_Bool = false;\n    }\n    else if (!FStop_Backend_Bool){\n      Strafe.stop();\n      FStop_Backend_Bool = true;\n    }\n        }\ntask::sleep(20);\n  }\n return 0;\n}\n\n\n\nfloat my_variable;\n\nint whenStarted1() {\n  Brain.Screen.print(\"Test Drive\");\n  MainLift.spin(vex::directionType::rev);\n  SecondaryLift.spin(vex::directionType::rev);\n  MainLift.setRotation(0.0, vex::rotationUnits::deg);\n  SecondaryLift.setRotation(0.0, vex::rotationUnits::deg);\n  Drivetrain.driveFor(vex::directionType::fwd, 5.0, vex::distanceUnits::in, true);\n  Drivetrain.turnFor(vex::turnType::right, 90.0, vex::rotationUnits::deg, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 3.0, vex::distanceUnits::in, true);\n  Strafe.rotateFor(1.0, vex::rotationUnits::rev, true);\n  MainLift.rotateFor(1.0, vex::rotationUnits::rev, true);\n  SecondaryLift.rotateFor(0.5, vex::rotationUnits::rev, true);\nreturn 0;\n}\n\n\nint main() {\n\n\n  srand(vex::timer::system());\n\n  vex::task rc_auto_loop_task_Controller(rc_auto_loop_callback_Controller);\n\n\n  // pre event registration\n  // register event handlers\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  whenStarted1();\n  return 0;\n}","cppStatus":"true","platform":"IQ","sdkVersion":"0.4.3","appVersion":"1.0.4-8","fileFormat":"0.1.0","icon":""}