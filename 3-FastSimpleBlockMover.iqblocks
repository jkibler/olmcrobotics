{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">my variable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"16eQDY;^$$TZTW^NDxSL\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"6g5kD{jRqfqT35IivUis\"><field name=\"NUM\">500</field></shadow></value><next><block type=\"iq_control_forever\" id=\"T-0n_zVem=v=4q(vK2lA\"><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin\" id=\")uaYOwpmBfxTbW~,JB/#\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">rev</field><next><block type=\"iq_control_wait\" id=\"17.]Dwh}FtP/ya{,Wik_\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"6#I5b2NmocsZaA,wTx*)\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"iq_control_break\" id=\"]VA%5hEJaC*r?%*g;[4Q\"></block></next></block></next></block></statement><next><block type=\"iq_motion_set_motor_position\" id=\"il,N-`+XG_i_17H?ZbHZ\"><field name=\"MOTOR\">MainLift</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\";PYD]9~6lQb4E057O@tu\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"Loa3jntJ4NCiMk}JBBs]\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"dxxRiR2famH_]@d+ka?y\"><field name=\"NUM\">.25</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"z#|(D?5r^$M@e}f8(M7E\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*HN2@.B-Pg4^q0uf`dme\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\")c~xFYP`d{I1,oqD2D(b\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"|1_;A_Q#Xi?J[djX4,N_\"><field name=\"NUM\">.85</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"wY(Z08/q3CKS=NEnEYlG\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"(r@7@pafYUGV;0zmX.f:\"><field name=\"NUM\">35</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"tzPq@trjsOI!#8*#odM,\"><field name=\"MOTOR\">MainLift</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"tX02BFi{]!/ok-anGEUr\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"pVcVJ_VABk3,{3y_c5M[\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"T!n(!t,)HO9g}9n=e3Ec\"><field name=\"NUM\">15</field></shadow></value><next><block type=\"iq_sounds_play_note\" id=\"TV;SA@^u_}_FTDFk!K{K\"><field name=\"NOTE\">0</field><field name=\"DURATION\">4</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","hasGyro":"false","width":"173","unit":"mm"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"MainLift","rightDir":"true","e":"SecondaryLift","eDir":"false","f":"Strafe","fDir":"true","drive":"tank"}},{"port":[5],"name":"Strafe","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"left","rev":"right"}},{"port":[4],"name":"MainLift","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"up","rev":"down"}},{"port":[11],"name":"SecondaryLift","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"up","rev":"down"}}],"slot":2,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"iq_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n// Robot configuration code.\nvex::motor LeftDriveSmart = vex::motor(vex::PORT1, 1, false);\nvex::motor RightDriveSmart = vex::motor(vex::PORT12, 1, true);\nvex::drivetrain Drivetrain= vex::drivetrain(LeftDriveSmart, RightDriveSmart,200, 173);\n;\ncontroller Controller = controller();\nmotor Strafe = motor(vex::PORT5, false);\nmotor MainLift = motor(vex::PORT4, true);\nmotor SecondaryLift = motor(vex::PORT11, true);\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision;\n\n\n// Generated code.\n\nbool RemoteControlCodeEnabled = true;\n\n\n\n \n bool RightStop_Backend_Bool_Controller = true;\n bool EStop_Backend_Bool = true;\n bool FStop_Backend_Bool = true;\n \n \nbool drivetrainL_Backend_Bool_Controller = true; \n bool drivetrainR_Backend_Bool_Controller = true;\n  int rc_auto_loop_callback_Controller() {\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n    int l_speed_for_d_train = Controller.AxisA.position();\n    int r_speed_for_d_train = Controller.AxisD.position();\nif (l_speed_for_d_train < 5 && l_speed_for_d_train > -5){\nif (drivetrainL_Backend_Bool_Controller) { LeftDriveSmart.stop(); drivetrainL_Backend_Bool_Controller = false;\n}\n} else {drivetrainL_Backend_Bool_Controller = true;} if (r_speed_for_d_train < 5 && r_speed_for_d_train > -5){\nif (drivetrainR_Backend_Bool_Controller) { RightDriveSmart.stop(); drivetrainR_Backend_Bool_Controller = false;\n}\n} else {drivetrainR_Backend_Bool_Controller = true;}     if (drivetrainL_Backend_Bool_Controller){\nLeftDriveSmart.setVelocity(l_speed_for_d_train, vex::velocityUnits::pct);\n    LeftDriveSmart.spin(vex::directionType::fwd);\n}    if (drivetrainR_Backend_Bool_Controller){\nRightDriveSmart.setVelocity(r_speed_for_d_train, vex::velocityUnits::pct);\n    RightDriveSmart.spin(vex::directionType::fwd);\n}\n        if (Controller.ButtonRUp.pressing()) {\n      MainLift.spin(vex::directionType::rev);\n      RightStop_Backend_Bool_Controller = false;\n    }\n    else if (Controller.ButtonRDown.pressing()) {\n      MainLift.spin(vex::directionType::fwd);\n      RightStop_Backend_Bool_Controller = false;\n    }\n    else if (!RightStop_Backend_Bool_Controller){\n       MainLift.stop();\n      RightStop_Backend_Bool_Controller = true;\n    }\n    if (Controller.ButtonEUp.pressing()) {\n      SecondaryLift.spin(vex::directionType::fwd);\n      EStop_Backend_Bool = false;\n    }\n    else if (Controller.ButtonEDown.pressing()) {\n      SecondaryLift.spin(vex::directionType::rev);\n      EStop_Backend_Bool = false;\n    }\n    else if (!EStop_Backend_Bool){\n      SecondaryLift.stop();\n      EStop_Backend_Bool = true;\n    }\n    if (Controller.ButtonFUp.pressing()) {\n      Strafe.spin(vex::directionType::rev);\n      FStop_Backend_Bool = false;\n    }\n    else if (Controller.ButtonFDown.pressing()) {\n      Strafe.spin(vex::directionType::fwd);\n      FStop_Backend_Bool = false;\n    }\n    else if (!FStop_Backend_Bool){\n      Strafe.stop();\n      FStop_Backend_Bool = true;\n    }\n        }\ntask::sleep(20);\n  }\n return 0;\n}\n\n\n\nfloat my_variable;\n\nint whenStarted1() {\n  Drivetrain.setVelocity(500.0, vex::velocityUnits::pct);\n  while (true) {\n    MainLift.spin(vex::directionType::rev);\n    task::sleep(static_cast<uint32_t>(2.0*1000));\n    break;\n  task::sleep(20);\n  }\n  MainLift.setRotation(0.0, vex::rotationUnits::deg);\n  MainLift.rotateFor(0.25, vex::rotationUnits::rev, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 20.0, vex::distanceUnits::in, true);\n  MainLift.rotateFor(0.85, vex::rotationUnits::rev, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 35.0, vex::distanceUnits::in, true);\n  MainLift.rotateFor(1.0 * -1, vex::rotationUnits::rev, true);\n  Drivetrain.driveFor(vex::directionType::rev, 15.0, vex::distanceUnits::in, true);\n  Brain.playNote(3, 0, 1000);\nreturn 0;\n}\n\n\nint main() {\n\n\n  srand(vex::timer::system());\n\n  vex::task rc_auto_loop_task_Controller(rc_auto_loop_callback_Controller);\n\n\n  // pre event registration\n  // register event handlers\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  whenStarted1();\n  return 0;\n}","cppStatus":"true","platform":"IQ","sdkVersion":"0.4.3","appVersion":"1.0.4-8","fileFormat":"0.1.0","icon":""}